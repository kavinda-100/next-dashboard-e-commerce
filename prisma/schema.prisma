// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String?
  lastName      String?
  email         String?         @unique
  password      String?
  isEmailVerified Boolean     @default(false)
  image         String?
  role          UserRole        @default(USER)
  isTwoFactorEnabled Boolean? @default(false)
  isOAuthAccount     Boolean? @default(false)
  twoFactorCinfirmationOTP TwoFactorConfirmationOTP?
  accounts      Account[]
  store         Store?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model EmailVerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorConfirmationOTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId @unique
  otp     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, otp])
}

enum Status {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
}

enum StorefrontType {
  ONLINE
  PHYSICAL
  BOTH
}

model Store {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId @unique
  storeName      String  @unique
  businessType   String
  storeDescription     String
  businessHours     String
  status   Status
  storefrontType     StorefrontType
  storeLicenseNumber  String
  taxIdNumber     String
  streetAddress  String
  city   String
  state   String
  country   String
  postalCode   String
  latitude   Float
  longitude   Float
  contactName   String
  contactEmail   String
  phoneNumber   String
  alternatePhoneNumber   String
  faxNumber   String
  websiteUrl   String
  customerServiceContact   String
  logoUrl   String
  thumbnailUrl   String
  multipleFilesUrls String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, storeName])
}
